### 11. Принципы SOLID и их пояснение
Принципы **SOLID** помогают писать гибкий, понятный и поддерживаемый код.

1. **Single Responsibility Principle (SRP)**:  
   Каждый класс должен иметь только одну ответственность (причину для изменения).  
   *Пояснение*: Класс должен быть сосредоточен на выполнении одной задачи.

2. **Open/Closed Principle (OCP)**:  
   Классы должны быть открыты для расширения, но закрыты для изменения.  
   *Пояснение*: Поведение класса можно изменить, не меняя его код, например, с помощью наследования или внедрения интерфейсов.

3. **Liskov Substitution Principle (LSP)**:  
   Объекты подклассов должны заменять объекты базового класса без изменения ожидаемого поведения.  
   *Пояснение*: Любой класс-наследник должен быть совместим с базовым классом и использоваться вместо него.

4. **Interface Segregation Principle (ISP)**:  
   Интерфейсы должны быть узкоспециализированными, чтобы клиенты не были вынуждены реализовывать ненужные методы.  
   *Пояснение*: Лучше создать несколько маленьких интерфейсов, чем один универсальный.

5. **Dependency Inversion Principle (DIP)**:  
   Модули высокого уровня не должны зависеть от модулей низкого уровня. Оба должны зависеть от абстракций.  
   *Пояснение*: Это достигается использованием интерфейсов или абстрактных классов.

---

### 12. Применение Dependency Inversion Principle в `Employee`
**Dependency Inversion Principle (DIP)** реализован в классе `Employee`, поскольку он зависит от абстракции (`IBonus`), а не от конкретных реализаций (`BonusA`, `BonusB`, `BonusC`).  

- **Абстракция**: Интерфейс `IBonus` определяет метод `calc`, не завися от конкретного способа вычисления вознаграждения.
- **Внедрение зависимости**: Конкретный объект `IBonus` передается в конструктор класса `Employee`. Это позволяет легко заменять реализацию вознаграждения (например, использовать `BonusA` или `BonusB`) без изменения кода `Employee`.

Преимущества:
- Уменьшение связанности: `Employee` не знает, какая именно реализация `IBonus` используется.
- Легкость тестирования: Можно подменять `IBonus` для тестирования.

---

### 13. Суть паттерна Abstract Factory и его преимущества
**Abstract Factory** — это порождающий паттерн, который предоставляет интерфейс для создания семейств взаимосвязанных объектов без указания их конкретных классов.

**Суть**:
- Интерфейс фабрики (`IFactory`) определяет методы для создания объектов (`getA`, `getB`, `getC`).
- Конкретные фабрики (`Level1Factory`, `Level2Factory`, `Level3Factory`) реализуют этот интерфейс, создавая конкретные реализации бонусов (`BonusA`, `BonusB`, `BonusC`).

**Преимущества**:
1. Позволяет группировать создание взаимосвязанных объектов.
2. Упрощает добавление новых семейств объектов (например, новых уровней фабрик).
3. Изолирует клиентский код от конкретных классов объектов, что улучшает поддержку и расширяемость.

---

### 14. Сравнение Factory Method и Abstract Factory
| **Характеристика**          | **Factory Method**                                           | **Abstract Factory**                                    |
|------------------------------|-------------------------------------------------------------|--------------------------------------------------------|
| **Назначение**              | Определяет интерфейс для создания одного объекта.            | Определяет интерфейс для создания семейства объектов.  |
| **Уровень абстракции**      | Ориентирован на создание одного продукта.                   | Позволяет создавать группы взаимосвязанных продуктов. |
| **Реализация**              | Использует наследование и переопределение методов.          | Реализуется через отдельный класс или интерфейс.      |
| **Применение**              | Когда нужно создать один объект, зависящий от условий.      | Когда нужно создавать семейства объектов.             |
| **Пример в Lec03LibN**      | Создание объектов `BonusA`, `BonusB`, `BonusC`.             | Создание уровней фабрик: `Level1Factory`, `Level2Factory`, `Level3Factory`. |

---

### 15. Изменения для библиотеки Lec03LibN

#### 1. Новый тип вознаграждения D:  
Формула: \( D(x, y, z) = (wH + a) * cH * x + y * z \), только для уровня 2.

**Изменения**:
1. Добавить новый класс:
   ```csharp
   public class BonusD : IBonus
   {
       public float cost1hour { get; set; }
       private float a;
       private float x;
       private float y;
       private float z;

       public BonusD(float cost1hour, float x, float y, float z, float a = 0)
       {
           this.cost1hour = cost1hour;
           this.x = x;
           this.y = y;
           this.z = z;
           this.a = a;
       }

       public float calc(float number_hours)
       {
           return (number_hours + a) * cost1hour * x + y * z;
       }
   }
   ```
2. Добавить метод `getD` в интерфейс `IFactory`:
   ```csharp
   IBonus getD(float cost1hour, float x, float y, float z);
   ```
3. Реализовать `getD` в классе `Level2Factory`:
   ```csharp
   public IBonus getD(float cost1hour, float x, float y, float z)
   {
       return new BonusD(cost1hour, x, y, z, a);
   }
   ```

---

#### 2. Новый уровень вознаграждения 4:  
Формула: \( 4(a, b, c) = (wH + a * c) * (cH + b) \), только для уровня 1.

**Изменения**:
1. Добавить новый класс:
   ```csharp
   public class Bonus4 : IBonus
   {
       public float cost1hour { get; set; }
       private float a;
       private float b;
       private float c;

       public Bonus4(float cost1hour, float a, float b, float c)
       {
           this.cost1hour = cost1hour;
           this.a = a;
           this.b = b;
           this.c = c;
       }

       public float calc(float number_hours)
       {
           return (number_hours + a * c) * (cost1hour + b);
       }
   }
   ```
2. Добавить метод `get4` в интерфейс `IFactory`:
   ```csharp
   IBonus get4(float cost1hour, float a, float b, float c);
   ```
3. Реализовать `get4` в классе `Level1Factory`:
   ```csharp
   public IBonus get4(float cost1hour, float a, float b, float c)
   {
       return new Bonus4(cost1hour, a, b, c);
   }
   ```

---

#### 3. Удаление типа вознаграждения B для уровня 3.

**Изменения**:
1. В `Level3Factory` удалить метод `getB`:
   ```csharp
   public IBonus getB(float cost1hour, float x)
   {
       throw new NotImplementedException("Bonus B is no longer supported at Level 3.");
   }
   ```
2. Если поддержка `BonusB` полностью удалена, удалить этот класс из библиотеки. 