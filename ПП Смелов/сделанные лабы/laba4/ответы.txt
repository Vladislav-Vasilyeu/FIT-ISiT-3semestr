5. Поясните суть паттерна Singleton, что дает его применение
Singleton — это паттерн проектирования, который гарантирует, что у класса будет только один экземпляр, и предоставляет глобальную точку доступа к этому экземпляру.

Основные свойства паттерна Singleton:
Единственный экземпляр: Создаётся только один объект класса.
Глобальная доступность: Предоставляется доступ к этому объекту из любой точки программы.
Ленивая инициализация: Экземпляр создаётся только при первом запросе.
Преимущества:
Контроль доступа к ресурсу: Когда требуется ограничить доступ к какому-то ресурсу (например, лог-файл, соединение с базой данных, глобальная конфигурация).
Экономия ресурсов: Создание объекта только один раз снижает затраты на память и процессорное время.
Удобство управления: Один объект управляет состоянием, что исключает конфликты между экземплярами.
Недостатки:
Усложняет тестирование, так как глобальный доступ затрудняет имитацию (mock) объекта.
В многоядерных системах может привести к ошибкам, если не реализована потокобезопасность.



6. Поясните реализацию класса Logger
Статический метод create() (почему статический):
Суть: Этот метод отвечает за создание или предоставление доступа к единственному экземпляру класса Logger.
Причина статичности:
Он вызывается напрямую через имя класса (Logger.create()) без необходимости создания объекта.
Это упрощает доступ к Singleton-объекту, так как объект может быть недоступен до своего создания.
Приватный конструктор (почему приватный):
Суть: Конструктор класса Logger сделан приватным, чтобы предотвратить создание экземпляров извне.
Причина:
Это позволяет контролировать создание объекта строго через метод create(), что гарантирует единственность экземпляра.
Если конструктор был бы публичным, любой программист мог бы создать несколько экземпляров класса, нарушив принцип Singleton.
Жизненный цикл Singleton-класса на тестовом примере:
Первое обращение:

Когда в тесте вызывается Logger.create() впервые, экземпляр класса Logger создаётся.
Пример:
csharp
Копировать код
ILogger logger1 = Logger.create(); // Создание первого экземпляра
Внутри метода create проверяется, существует ли объект _instance. Если нет, создаётся новый объект.
Последующие обращения:

При повторных вызовах Logger.create() уже существующий объект _instance возвращается:
csharp
Копировать код
ILogger logger2 = Logger.create(); // Возвращает уже созданный экземпляр
Один и тот же объект используется всеми частями программы.
Завершение жизненного цикла:

Экземпляр Logger остаётся в памяти до завершения программы, если он не освобождён вручную или сборщиком мусора.




7. Примеры приложений, в которых может быть применён паттерн Singleton
1. Логирование (как в данном примере):
Один лог-файл используется для записи всей информации об ошибках, запросах и других событиях.
2. Конфигурация приложения:
Глобальные настройки (например, параметры подключения к базе данных, переменные окружения).
3. Пул соединений (Connection Pool):
Управление соединениями с базой данных через один общий пул, чтобы уменьшить нагрузку на сервер.
4. Кэширование:
Реализация объекта-кэша, который хранит часто используемые данные.
5. Работа с устройствами:
Обеспечение единственного доступа к аппаратным ресурсам, например, работа с принтером, сканером, портом ввода-вывода.
6. Игровые приложения:
Менеджер сцен (Scene Manager) или глобальный объект для отслеживания состояния игры.
7. Сетевые приложения:
Управление соединениями, например, класс, реализующий HTTP-клиент или WebSocket, который используется по всему приложению.
Пример:
csharp
Копировать код
public class ConfigManager
{
    private static ConfigManager _instance;
    private Dictionary<string, string> _settings = new Dictionary<string, string>();

    private ConfigManager() { }

    public static ConfigManager Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = new ConfigManager();
            }
            return _instance;
        }
    }

    public string GetSetting(string key)
    {
        return _settings.ContainsKey(key) ? _settings[key] : null;
    }

    public void SetSetting(string key, string value)
    {
        _settings[key] = value;
    }
}
Это демонстрирует, как Singleton может использоваться для глобального управления настройками приложения.






